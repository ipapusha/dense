/* calculator with AST */
%{
#include <stdio.h>
#include <stdlib.h>
#include "parse.h"
%}

%union {
	struct ast *a;
	struct symbol *s;	/* which symbol */
	double d;
}

/* declare tokens */
%token <d> NUMBER
%token <s> NAME
%token EOL

/* precedence */
%right EQ
%left COMMA
%left PLUS MINUS
%left MUL DIV DOTMUL DOTDIV
%right UMINUS
%right TRANSPOSE
%right EXP DOTEXP
%nonassoc LPAREN RPAREN

/* 
	%token <d> NUMBER
	%token <s> NAME
	%token EOL
	%token IF THEN ELSE WHILE DO LET

	%right EQ
	%left COMMA
	%left COLON
	%left EQEQ NE GE LE GT LT
	%left OR AND
	%left PLUS MINUS
	%left MUL DIV DOTMUL DOTDIV
	%right UMINUS
	%right TRANSPOSE
	%right EXP DOTEXP
	%nonassoc LPAREN RPAREN
*/
/*
 %nonassoc <fn> CMP
 %right '='
 %left '+' '-'
 %left '*' '/'
 %nonassoc '|' UMINUS
 
 %type <a> exp stmt list explist
 %type <sl> symlist
 
 %start calclist
*/

%%

exp: exp PLUS exp				{}
	| exp MINUS exp				{}
	| exp MUL exp				{}
	| exp DIV exp				{}
	| exp DOTMUL exp			{}
	| exp DOTDIV exp			{}
	| MINUS exp %prec UMINUS	{}
	| NUMBER					{}
	| NAME
	;




stmt: IF exp THEN list				{ $$ = newflow('I', $2, $4, NULL); }
	| IF exp THEN list ELSE list	{ $$ = newflow('I', $2, $4, $6); }
	| WHILE exp DO list				{ $$ = newflow('W', $2, $4, NULL); }
	| exp
	;

list: /* nothing */		{ $$ = NULL; }
	| stmt ';' list		{ if ($3 == NULL) 
							$$ = $1;
						  else
							$$ = newast('L', $1, $3); }
	;

exp: exp CMP exp			{ $$ = newcmp($2, $1, $3); }
	| exp '+' exp			{ $$ = newast('+', $1, $3); }
	| exp '-' exp			{ $$ = newast('-', $1, $3); }
	| exp '*' exp			{ $$ = newast('*', $1, $3); }
	| exp '/' exp			{ $$ = newast('/', $1, $3); }
	| '|' exp				{ $$ = newast('|', $2, NULL); }
	| '(' exp ')'			{ $$ = $2; }
	| '-' exp %prec UMINUS	{ $$ = newast('M', $2, NULL); }
	| NUMBER				{ $$ = newnum($1); }		/* TODO: ensure lexer does atof() */
	| NAME					{ $$ = newref($1); }
	| NAME '=' exp			{ $$ = newasgn($1, $3); }
	| FUNC '(' explist ')'	{ $$ = newfunc($1, $3); } /* XXX: why is the first argument this? */
	| NAME '(' explist ')'	{ $$ = newcall($1, $3); }
	;

explist: exp
	| exp ',' explist		{ $$ = newast('L', $1, $3); }
	;

symlist: NAME			{ $$ = newsymlist($1, NULL); }
	| NAME ',' symlist	{ $$ = newsymlist($1, $3); }
	;

calclist: /* nothing */
	| calclist stmt EOL		{ printf("= %4.4g\n> ", eval($2));
							  treefree($2); }
	| calclist LET NAME '(' symlist ')' '=' list EOL {
			dodef($3, $5, $8);
			printf("Defined %s\n> ", $3->name);
		}
	| calclist error EOL	{ yyerrok; printf("> "); }
	;

File: parse.h
#ifndef _PARSE_H
#define _PARSE_H 

#include "cs.h"

/* interface to lexer */
extern int yylineno;		/* from lexer */
void yyerror(char *s, ...);

/* symbol table */
struct symbol {
	char *name;				/* a variable name */
	struct ast *v;			/* value of symbol */
};

/* simple symtab of fixed size */
#define NHASH 9997
struct symbol symtab[NHASH];
struct symbol *lookup(char *);

enum nodetype {
	nPLUS,
	nMINUS,
	nTIMES,
	nDOTTIMES,
	nDIV,
	nDOTDIV,
	nSCALARVAL,
	nMATRIXVAL,
	nSYMREF,
	nSYMASGN,
	nHLIST,
	nVLIST
};

struct ast {
	enum nodetype type;
	struct ast *l;
	struct ast *r;
};

struct scalarval {
	enum nodetype type;	/* type S */
	double v;
};

struct matrixval {
	enum nodetype type;	/* type M */
	cs *v;
};

struct symref {
	enum nodetype type;	/* type N */
	struct symbol *s;
}

struct symasgn {
	enum nodetype type;	/* type = */
	struct symbol *s;	/* symbol to be assigned */
	struct ast *v;		/* AST value assigned to it */
};

struct list {
	enum nodetype type;	/* type , or ; */
	struct ast *l;
	struct ast *r;
};

/* build an AST */
struct ast *newast(enum nodetype type, struct ast *l, struct ast *r);
struct ast *newscalarval(double v);
struct ast *newmatrixval(cs *v);
struct ast *newsymref(struct symbol *s);
struct ast *newsymasgn(struct symbol *s, struct ast *v);
struct ast *newlist(enum nodetype type, struct ast *l, struct ast *r);

/* evaluate an AST */
double eval(struct ast *);

/* delete and free an AST */
void treefree(struct ast *);

#endif
